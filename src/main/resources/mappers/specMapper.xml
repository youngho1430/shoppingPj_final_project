<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.group6.shopping.batis.SpecificationsDAO">
	<resultMap id="ModelsVO" type="ModelsVO">
		<result column="model_id" property="model_id" />
		<result column="product_id" property="product_id" />
		<result column="model_name" property="model_name" />
		<collection property="productsVO" resultMap="ProductsVO"/>
	</resultMap>
	<resultMap id="ProductsVO" type="ProductsVO">
		<result column="product_id" property="product_id"/>
		<result column="product_name" property="product_name"/>
	</resultMap>

	<select id="getModels" resultType="SpecVO">
		select *
		from products p, models m, specifications s
		where p.product_id = m.product_id and m.model_id = s.model_id
		  and p.product_name = #{product}
		order by s.model_id;
	</select>

	<select id="getModelNames" resultType="SpecDisplayVO">
		select m.product_id, m.model_id, m.model_name
		from products p, models m, specifications s
		where p.product_id = m.product_id and m.model_id = s.model_id
		  and p.product_name = #{product}
		group by m.model_name
		order by s.model_id;
	</select>

	<select id="getSpecDisplay" resultType="Object">
		select s.${spec}
		from products p, models m, specifications s
		where p.product_id = m.product_id and m.model_id = s.model_id
		  and p.product_name = #{product} and m.model_name = #{model}
		group by s.${spec}
		order by s.model_id;
	</select>

	<select id="getMaxPrice" resultType="int">
		select max(s.spec_price)
		from products p, models m, specifications s
		where p.product_id = m.product_id and m.model_id = s.model_id
		  and p.product_name = #{product} and m.model_name = #{model}
		order by s.model_id;
	</select>

	<select id="getMinPrice" resultType="int">
		select min(s.spec_price)
		from products p, models m, specifications s
		where p.product_id = m.product_id and m.model_id = s.model_id
		  and p.product_name = #{product} and m.model_name = #{model}
		order by s.model_id;
	</select>

	<select id="getSpec" resultType="SpecVO">
		select *
		from specifications
		where model_id = #{model_id}
		  and spec_color = #{spec_color} and spec_display = #{spec_display} and spec_memory = #{spec_memory}
		  and spec_network = #{spec_network} and spec_processor = #{spec_processor} and spec_weight = #{spec_weight};
	</select>

	<update id="updateSpecQty">
		update specifications s
		set s.spec_qty = s.spec_qty - (select qty from(select spec_id, cart_qty as qty from carts where spec_id = s.spec_id and mem_id = #{mem_id} and receipt_id is null)A)
		where s.spec_id in
			  (select sId from(select spec_id as sId from carts where mem_id = #{mem_id} and receipt_id is null) B)
	</update>

	<select id="searchSpec" resultType="string">
		select ${spec}
		from specifications s, models m, products p
		where s.model_id = m.model_id and m.product_id = p.product_id
		group by ${spec};
	</select>


	<select id = "getModel" resultMap="ModelsVO">
		select m.model_id, m.model_name, p.product_name
		from specifications s, models m, products p
		where s.model_id = m.model_id and m.product_id = p.product_id
			<if test="product_name.size != 0 or model_name.size != 0 or spec_processor.size != 0 or spec_memory.size != 0 or spec_display.size != 0
			or spec_network.size != 0 or spec_color.size != 0">
				and (
				<if test="product_name.size != 0">
				  p.product_name in
				  <foreach collection="product_name" item="pname" open="(" close=")" separator=",">
					  #{pname}
				  </foreach>
					<if test="model_name.size != 0 or spec_processor.size != 0 or spec_memory.size != 0 or spec_display.size != 0
					or spec_network.size != 0 or spec_color.size != 0">
						or
					</if>
				</if>
				<if test="model_name.size != 0">
					m.model_name in
					<foreach collection="model_name" item="mname" open="(" close=")" separator=",">
					  #{mname}
					</foreach>
					<if test="spec_processor.size != 0 or spec_memory.size != 0 or spec_display.size != 0
						or spec_network.size != 0 or spec_color.size != 0">
						or
					</if>
				</if>
				<if test="spec_processor.size != 0">
					s.spec_processor in
					<foreach collection="spec_processor" item="processor" open="(" close=")" separator=",">
						#{processor}
					</foreach>
					<if test="spec_memory.size != 0 or spec_display.size != 0
							or spec_network.size != 0 or spec_color.size != 0">
						or
					</if>
				</if>
				<if test="spec_memory.size != 0">
					s.spec_memory in
					<foreach collection="spec_memory" item="memory" open="(" close=")" separator=",">
						#{memory}
					</foreach>
					<if test="spec_display.size != 0 or spec_network.size != 0 or spec_color.size != 0">
						or
					</if>
				</if>
				<if test="spec_display.size != 0">
					s.spec_display in
					<foreach collection="spec_display" item="display" open="(" close=")" separator=",">
						#{display}
					</foreach>
					<if test="spec_network.size != 0 or spec_color.size != 0">
						or
					</if>
				</if>
				<if test="spec_network.size != 0">
					s.spec_network in
					<foreach collection="spec_network" item="network" open="(" close=")" separator=",">
						#{network}
					</foreach>
					<if test="spec_color.size != 0">
						or
					</if>
				</if>
				<if test="spec_color.size != 0">
					s.spec_color in
					<foreach collection="spec_color" item="color" open="(" close=")" separator=",">
						#{color}
					</foreach>
				</if>
				)
			</if>
		group by m.model_id
		order by 1;
	</select>

</mapper>